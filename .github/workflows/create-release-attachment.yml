on:
  release:
    types:
      - published

jobs:
  create-release-attachment:
    name: Create Release Attachment
    runs-on: ubuntu-latest
    steps:
      - name: Check environment
        run: |
            if [ -z "${{ secrets.ATTACH_ASSETS_SECRET }}" ]; then
                cat <<EOT >&2
            Missing ATTACH_ASSETS_SECRET secret!
            In order to create it:
            
            1. Create a Personal Access Token
            For better security, you can create a "Fine-grained Personal Access Token" at
            https://github.com/settings/tokens?type=beta
            limiting its access to the repository $GITHUB_REPOSITORY and selecting the permission "Contents" (Access: read and write)
            
            2. Go to
            https://github.com/$GITHUB_REPOSITORY/settings/secrets/actions
            and create a new secret named
            ATTACH_ASSETS_SECRET
            with the value of the above personal access token
            
            EOT
                exit 1
            fi
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
            php-version: '7.4'
            tools: composer:v2
            coverage: none
      - name: Checkout
        uses: actions/checkout@v3
      - name: Extrach package handle
        id: inspect
        run: |
            PROPERTY_LINE="$(grep -E '^[ \t]*(public|protected)[ \t]+\$pkgHandle[ \t]*=[ \t]*["'\''][^"'\'']+["'\''][ \t]*;' controller.php)";
            if [ -z "$PROPERTY_LINE" ]; then
                echo 'Unable to find the $pkgHandle property in the controller.php file' >2
                exit 1
            fi
            PACKAGE_HANDLE="$(printf '%s' "$PROPERTY_LINE" | sed 's/^.*["'\'']\(.*\)["'\''].*/\1/')"
            echo "Detected package handle: '$PACKAGE_HANDLE'"
            echo "package-handle=$PACKAGE_HANDLE" >>"$GITHUB_OUTPUT"
      - name: Prepare working directory
        run: |
            rm -rf /tmp/${{ steps.inspect.outputs.package-handle }} /tmp/${{ steps.inspect.outputs.package-handle }}.zip
            mkdir /tmp/${{ steps.inspect.outputs.package-handle }}
      - name: Export repository
        run: git archive --format=tar HEAD | tar x -C /tmp/${{ steps.inspect.outputs.package-handle }}
      - name: Install composer dependencies
        run: composer update --prefer-dist --no-dev --no-progress --optimize-autoloader --ansi --no-interaction --no-cache --working-dir=/tmp/${{ steps.inspect.outputs.package-handle }}
      - name: Check if composer directory is needed
        run: |
            if [ -z "$(ls -l /tmp/${{ steps.inspect.outputs.package-handle }}/vendor/ | grep -E ^d | grep -vE ' composer$')" ]; then
                echo 'No composer dependencies found: deleting the vendor directory'
                rm -rf /tmp/${{ steps.inspect.outputs.package-handle }}/vendor
            else
                echo 'No composer dependencies found: keeping the vendor directory'
            fi
      - name: Copying additional files
        run: >
          # cp -t /tmp/${{ steps.inspect.outputs.package-handle }}
          README.md
      - name: Remove unneeded files
        run: >
          rm
          /tmp/${{ steps.inspect.outputs.package-handle }}/composer.json
          /tmp/${{ steps.inspect.outputs.package-handle }}/composer.lock
      - name: Creating final ZIP archive
        run: (cd /tmp && zip -r ${{ steps.inspect.outputs.package-handle }}.zip ${{ steps.inspect.outputs.package-handle }})
      - name: Attach ZIP archive to release
        env:
          GH_TOKEN: ${{ secrets.ATTACH_ASSETS_SECRET }}
        run: gh release upload "$GITHUB_REF_NAME" /tmp/${{ steps.inspect.outputs.package-handle }}.zip
